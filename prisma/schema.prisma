generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  account Account[]
  riotAccounts RiotAccount[]
}

model Account {
  id String @id @default(uuid())
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String? 
  expires_at Int? 
  token_type String?
  scope String?
  id_token String?
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(uuid())
  sessionToken String @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model VerificationToken {
  id String @id @default(uuid())
  identifier String
  token String @unique 
  expires DateTime
  
  @@unique([identifier, token])
}

model RiotAccount {
  id String @id @default(uuid())
  puuid String @unique
  username String
  tag String
  profileIconId String

  matches Match[]

  user User @relation(fields: [userId], references: [id])
  userId String
}

model Match {
  id String @id @default(uuid())
  matchId String
  participants String[]

  riotAccount RiotAccount @relation(fields: [riotAccountId], references: [id])
  riotAccountId String
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  account      Account[]
  riotAccounts RiotAccount[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RiotAccount {
  id            String @id @default(cuid())
  puuid         String @unique
  username      String
  tag           String
  profileIconId String
  region        String

  matches Match[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([username, tag])
}

model Match {
  id           String   @id @default(uuid())
  matchId      String
  participants String[]

  riotAccount   RiotAccount @relation(fields: [riotAccountId], references: [id])
  riotAccountId String
}
